# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: globalstripe
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: ${opt:region}
  endpointType: regional

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

custom:
  albPerRegion:
    us-east-2:
      https: arn:aws:elasticloadbalancing:us-east-2:541263489771:listener/app/shared-demos/5a061b79996b464d/c3ae61226817f665
      http: arn:aws:elasticloadbalancing:us-east-2:541263489771:listener/app/shared-demos/5a061b79996b464d/e316f7cf27a9c9b4
    eu-west-3:
      https: arn:aws:elasticloadbalancing:eu-west-3:541263489771:listener/app/shared-demos/4682d9e8dc6654b8/a7a905a9afa892f0
      http: arn:aws:elasticloadbalancing:eu-west-3:541263489771:listener/app/shared-demos/4682d9e8dc6654b8/2400c7796d563fc4
    ap-northeast-2:
      https: arn:aws:elasticloadbalancing:ap-northeast-2:541263489771:listener/app/shared-demos/97b1efd713ff9add/240fafd6204a4ae2
      http: arn:aws:elasticloadbalancing:ap-northeast-2:541263489771:listener/app/shared-demos/97b1efd713ff9add/0a735ffe52b3cca2

# This section conditionally uses different functions per region in the custom
# section above.
functions:
  service:
    handler: bin/globalstripe
    events:
      # HTTPS
      - alb:
          listenerArn: ${self:custom.albPerRegion.${self:provider.region}.https}
          priority: 1
          conditions:
            host: globalstripe.demo.cockroachdb.dev
            path: /**
      # HTTP
      - alb:
          listenerArn: ${self:custom.albPerRegion.${self:provider.region}.http}
          priority: 2
          conditions:
            host: globalstripe.demo.cockroachdb.dev
            path: /**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
